import json
import locale
import sys
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

def load_data(filename):
    """Loads the contents of filename as a JSON file."""
    with open(filename) as json_file:
        data = json.load(json_file)
    return data

def format_car(car):
    """Given a car dictionary, returns a nicely formatted name."""
    return "{} {} ({})".format(car["car_make"], car["car_model"], car["car_year"])

def process_data(data):
    """Analyzes the data, looking for maximums.
    Returns a list of lines that summarize the information.
    """
    max_revenue = {"revenue": 0}
    max_sales = {"total_sales": 0}
    car_sales_by_year = {}

    for item in data:
        # Calculate revenue generated by this model (price * total_sales)
        item_price = locale.atof(item["price"].strip("$"))
        item_revenue = item["total_sales"] * item_price
        
        if item_revenue > max_revenue["revenue"]:
            item["revenue"] = item_revenue
            max_revenue = item

        # Calculate the car model with the most sales
        if item["total_sales"] > max_sales["total_sales"]:
            max_sales = item

        # Calculate the most popular car_year
        car_year = item["car"]["car_year"]
        if car_year not in car_sales_by_year:
            car_sales_by_year[car_year] = item["total_sales"]
        else:
            car_sales_by_year[car_year] += item["total_sales"]

    # Find the most popular car year
    most_popular_year = max(car_sales_by_year, key=car_sales_by_year.get)
    most_popular_year_sales = car_sales_by_year[most_popular_year]

    summary = [
        "The {} generated the most revenue: ${:.2f}".format(format_car(max_revenue["car"]), max_revenue["revenue"]),
        "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["total_sales"]),
        "The most popular year was {} with {} sales.".format(most_popular_year, most_popular_year_sales)
    ]

    return summary

def cars_dict_to_table(car_data):
    """Turns the data in car_data into a list of lists for the PDF report."""
    table_data = [["ID", "Car", "Price", "Total Sales"]]
    for item in car_data:
        table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
    return table_data

def generate_pdf(summary, table_data, filename):
    """Generate a PDF report."""
    c = canvas.Canvas(filename, pagesize=letter)
    width, height = letter

    c.drawString(100, height - 50, "Sales Summary")
    
    # Add the summary
    y = height - 100
    for line in summary:
        c.drawString(50, y, line)
        y -= 30

    # Add the table
    y -= 50
    c.drawString(50, y, "ID   Car   Price   Total Sales")
    y -= 30
    for row in table_data[1:]:  # Skip the header row
        c.drawString(50, y, "{}   {}   {}   {}".format(row[0], row[1], row[2], row[3]))
        y -= 20
        if y < 50:
            c.showPage()
            y = height - 50

    c.save()

def main(argv):
    """Process the JSON data and generate a full report out of it."""
    data = load_data("car_sales.json")
    summary = process_data(data)
    print(summary)

    # Generate the PDF
    table_data = cars_dict_to_table(data)
    generate_pdf(summary, table_data, "cars.pdf")

   

if __name__ == "__main__":
    main(sys.argv)


